// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PuzzleShop.Core;

#nullable disable

namespace PuzzleShop.Core.Migrations
{
    [DbContext(typeof(PuzzleShopContext))]
    [Migration("20221017145655_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f1123faf-65fd-44b3-a465-cece9c0ec574",
                            ConcurrencyStamp = "7a5719e7-ec33-4405-a81a-44fe2970b20f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b749fad4-cff6-43b5-95f0-cd6aba94334c",
                            ConcurrencyStamp = "6da89679-428c-4f1e-b15a-7c34e03b810e",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "670d30c5-8162-46c4-91bd-edaefd92b04e",
                            ConcurrencyStamp = "818b2ace-ed17-4e87-85ae-a0e398fbb1cc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b3df9f0b-0abd-483c-a815-a7400508798b",
                            RoleId = "f1123faf-65fd-44b3-a465-cece9c0ec574"
                        },
                        new
                        {
                            UserId = "b3df9f0b-0abd-483c-a815-a7400508798b",
                            RoleId = "b749fad4-cff6-43b5-95f0-cd6aba94334c"
                        },
                        new
                        {
                            UserId = "b3df9f0b-0abd-483c-a815-a7400508798b",
                            RoleId = "670d30c5-8162-46c4-91bd-edaefd92b04e"
                        },
                        new
                        {
                            UserId = "c31dbfc3-95c4-4701-a699-4b589bdda2ca",
                            RoleId = "b749fad4-cff6-43b5-95f0-cd6aba94334c"
                        },
                        new
                        {
                            UserId = "c31dbfc3-95c4-4701-a699-4b589bdda2ca",
                            RoleId = "670d30c5-8162-46c4-91bd-edaefd92b04e"
                        },
                        new
                        {
                            UserId = "e5d1255d-08e2-49e9-bf2f-5bec30c5229c",
                            RoleId = "670d30c5-8162-46c4-91bd-edaefd92b04e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PuzzleShop.Core.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PuzzleShop.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PuzzleShop.Core.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("OrderListId")
                        .HasColumnType("int");

                    b.Property<int?>("PuzzleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderListId");

                    b.HasIndex("PuzzleId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("PuzzleShop.Core.OrderList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OrderLists");
                });

            modelBuilder.Entity("PuzzleShop.Core.Puzzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Articul")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CountryId");

                    b.ToTable("Puzzles");
                });

            modelBuilder.Entity("PuzzleShop.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c31dbfc3-95c4-4701-a699-4b589bdda2ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdd669c9-bb5c-4197-bef7-4dec9d7fef9f",
                            Email = "manager@puzzleshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@PUZZLESHOP.COM",
                            NormalizedUserName = "MANAGER@PUZZLESHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7aXS7WSTglNqtqUi+M5Wik6BYdqnVavmWDBH6rY/McY0jtNGQWcoCB9gat4eEJ1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5ef867f-b291-444b-868e-266a73d14ac1",
                            TwoFactorEnabled = false,
                            UserName = "manager@puzzleshop.com"
                        },
                        new
                        {
                            Id = "e5d1255d-08e2-49e9-bf2f-5bec30c5229c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2e2a8bc-5d91-4513-a3c4-1865ad386b8b",
                            Email = "customer@puzzleshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@PUZZLESHOP.COM",
                            NormalizedUserName = "CUSTOMER@PUZZLESHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPDzgmdRtPnAuPHRMMVhkGLI5Qt3Hw8F4CUZA7EYc7a8KtR+DeZfgDI/4km9frnrbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9eb121bc-c654-4883-8503-5983f66750ad",
                            TwoFactorEnabled = false,
                            UserName = "customer@puzzleshop.com"
                        },
                        new
                        {
                            Id = "b3df9f0b-0abd-483c-a815-a7400508798b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31bbc6f5-f719-40f6-afcc-aaad07a85df3",
                            Email = "admin@puzzleshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PUZZLESHOP.COM",
                            NormalizedUserName = "ADMIN@PUZZLESHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGELXiaeeaQE3WD7ih3EmEyv3boUWjBKbpr839adOVnaUifaam+w/J4baAXe4wZlMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7db2b157-8320-4a50-ba40-7bc5480ddf9f",
                            TwoFactorEnabled = false,
                            UserName = "admin@puzzleshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PuzzleShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PuzzleShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PuzzleShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PuzzleShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PuzzleShop.Core.OrderItem", b =>
                {
                    b.HasOne("PuzzleShop.Core.OrderList", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderListId");

                    b.HasOne("PuzzleShop.Core.Puzzle", "Puzzle")
                        .WithMany("OrderItems")
                        .HasForeignKey("PuzzleId");

                    b.HasOne("PuzzleShop.Core.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Puzzle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PuzzleShop.Core.Puzzle", b =>
                {
                    b.HasOne("PuzzleShop.Core.Brand", "Brand")
                        .WithMany("Puzzles")
                        .HasForeignKey("BrandId");

                    b.HasOne("PuzzleShop.Core.Country", "Country")
                        .WithMany("Puzzles")
                        .HasForeignKey("CountryId");

                    b.Navigation("Brand");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PuzzleShop.Core.Brand", b =>
                {
                    b.Navigation("Puzzles");
                });

            modelBuilder.Entity("PuzzleShop.Core.Country", b =>
                {
                    b.Navigation("Puzzles");
                });

            modelBuilder.Entity("PuzzleShop.Core.OrderList", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PuzzleShop.Core.Puzzle", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PuzzleShop.Core.User", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
